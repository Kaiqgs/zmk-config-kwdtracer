/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 750
#define ZMK_POINTING_DEFAULT_SCRL_VAL 150

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hrm: behavior_hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            #binding-cells = <2>;
            bindings = <&kp &kp>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <40>;
            hold-trigger-on-release;
        };
        mmv: behavior_mouse_movement {
            x-input-code = <INPUT_REL_X>;
            y-input-code = <INPUT_REL_Y>;
            time-to-max-speed-ms = <150>;
            acceleration-exponent = <1>;
        };
        msc: behavior_mouse_scroll {
            x-input-code = <INPUT_REL_HWHEEL>;
            y-input-code = <INPUT_REL_WHEEL>;
            time-to-max-speed-ms = <150>;
            acceleration-exponent = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemodh {
            display-name = "Default Layer";
            bindings = <
&kp Q         &kp W        &kp F         &kp P         &kp B        &lt 2 ESC    &lt 7 DEL  &kp J          &kp L         &kp U         &kp Y        &kp SEMI
&hrm LMETA A  &hrm LALT R  &hrm LCTRL S  &hrm LSHFT T  &kp G        &lt 3 TAB    &mo 5      &kp M          &hrm RSHFT N  &hrm RCTRL E  &hrm RALT I  &hrm RMETA O
&kp Z         &kp X        &kp C         &kp D         &kp V        &lt 6 ENTER  &mo 6      &kp K          &kp H         &kp COMMA     &kp DOT      &kp SLASH
              &kp DOWN     &kp UP        &kp SPACE     &lt 1 SPACE                          &kp BACKSPACE  &lt 4 ENTER   &kp LEFT      &kp RIGHT
            >;
        };

        symbols {
            bindings = <
&kp N1        &kp N2         &kp N3        &kp N4        &kp N5         &kp LS(DQT)  &kp GRAVE  &kp N6      &kp N7       &kp N8        &kp N9         &kp N0
&kp MINUS     &kp EQUAL      &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(UNDER)  &kp SQT      &kp SQT    &kp STAR    &kp RSHFT    &kp RCTRL     &kp RALT       &kp LG(RGUI)
&kp LS(PLUS)  &kp LS(POUND)  &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(PRCNT)  &kp GRAVE    &kp GRAVE  &kp LS(AT)  &kp LBKT     &kp RBKT      &kp LS(AMPS)   &kp BSLH
              &kp LS(CARET)  &kp LS(DLLR)  &kp ESC       &none                                  &kp SQT     &kp LS(DQT)  &kp LS(EXCL)  &kp LS(TILDE)
            >;
        };

        numbers {
            bindings = <
&kp J  &kp L     &kp U      &kp Y     &kp SEMI  &none          &none    &kp LBKT  &kp N7         &kp N8  &kp N9      &kp PLUS
&kp O  &kp I     &kp E      &kp N     &kp M     &kp RET        &none    &kp SEMI  &kp N4         &kp N5  &kp N6      &kp MINUS
&kp K  &kp H     &kp COMMA  &kp DOT   &kp FSLH  &kp KP_DIVIDE  &kp DOT  &kp RET   &kp N1         &kp N2  &kp N3      &kp EQUAL
       &kp LEFT  &kp RIGHT  &kp BSPC  &kp DEL                           &kp N0    &kp KP_DIVIDE  &kp N0  &kp KP_DOT
            >;
        };

        functions {
            bindings = <
&kp F1      &kp F2           &kp F3     &kp F4     &kp F5    &trans  &trans  &kp F6  &kp F7     &kp F8     &kp F9    &kp F10
&caps_word  &kp PRINTSCREEN  &kp LC(S)  &kp LC(N)  &kp BSPC  &trans  &trans  &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RMETA
&kp HOME    &kp PG_UP        &kp PG_DN  &kp END    &kp RET   &trans  &trans  &trans  &trans     &trans     &trans    &trans
            &kp F11          &kp F12    &kp DEL    &trans                    &trans  &trans     &kp F13    &kp F14
            >;
        };

        neovim {
            bindings = <
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &none  &none  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
&none   &none   &none   &none   &none   &none  &none  &none   &kp H   &kp J   &kp K   &kp L
&none   &none   &none   &none   &none   &none  &none  &none   &none   &none   &none   &none
        &none   &none   &none   &none                 &none   &none   &none   &none
            >;
        };

        media {
            bindings = <
&none  &none  &none  &none   &none   &trans  &kp K_STOP  &none             &none           &none         &none            &none
&none  &none  &none  &none   &none   &trans  &trans      &none             &kp K_PREVIOUS  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp K_NEXT
&none  &none  &none  &none   &none   &trans  &trans      &none             &none           &none         &none            &none
       &none  &none  &trans  &trans                      &kp K_PLAY_PAUSE  &kp K_MUTE      &none         &none
            >;
        };

        system {
            bindings = <
&kp K_PWR       &bt BT_DISC 0  &bt BT_DISC 1     &bt BT_DISC 2      &kp K_SLEEP        &bt BT_CLR  &bt BT_CLR  &kp K_SLEEP        &bt BT_DISC 0      &bt BT_DISC 1     &bt BT_DISC 2  &kp K_POWER
&none           &bt BT_SEL 0   &bt BT_SEL 1      &bt BT_SEL 2       &none              &soft_off   &soft_off   &none              &bt BT_SEL 0       &bt BT_SEL 1      &bt BT_SEL 2   &none
&bt BT_CLR_ALL  &none          &ext_power EP_ON  &ext_power EP_OFF  &ext_power EP_TOG  &none       &none       &ext_power EP_TOG  &ext_power EP_OFF  &ext_power EP_ON  &none          &bt BT_CLR_ALL
                &to 0          &to 8             &sys_reset         &bootloader                                &bootloader        &sys_reset         &to 8             &to 0
            >;
        };

        mouse {
            bindings = <
&trans     &trans        &trans     &trans      &trans  &trans  &trans  &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT
&kp LMETA  &kp LEFT_ALT  &kp LCTRL  &kp LSHIFT  &trans  &trans  &trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT
&trans     &trans        &trans     &trans      &trans  &trans  &trans  &trans  &mkp LCLK       &mkp MCLK       &mkp MB5      &mkp RCLK
           &trans        &trans     &trans      &trans                  &trans  &trans          &trans          &trans
            >;
        };

        game {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans
            >;
        };
    };
};
